Index: src/main/java/Jandy/Krystian/character/view/MageView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Jandy/Krystian/character/view/MageView.java b/src/main/java/Jandy/Krystian/character/view/MageView.java
new file mode 100644
--- /dev/null	(date 1646816129005)
+++ b/src/main/java/Jandy/Krystian/character/view/MageView.java	(date 1646816129005)
@@ -0,0 +1,45 @@
+package Jandy.Krystian.character.view;
+
+
+import Jandy.Krystian.character.entity.Mage;
+import Jandy.Krystian.character.service.MageService;
+import Jandy.Krystian.view.View;
+
+import java.util.Map;
+
+public class MageView implements View {
+
+    private final MageService mageService;
+
+    public MageView(MageService mageService) {
+        this.mageService = mageService;
+    }
+
+    @Override
+    public void display() {
+
+        System.out.println("==========================================\nWidok: ");
+        for (Mage mage : mageService.getAllMage()) {
+            displayApprentices(mage,"-");
+        }
+        System.out.println("==========================================\n");
+
+        System.out.println("==========================================\nStatystyki: ");
+        for(Map.Entry<Mage,Integer> m : mageService.createMageServiceStatistics().entrySet()){
+            System.out.println(m.getKey() + " : " + m.getValue());
+        }
+        System.out.println("==========================================\n");
+
+    }
+
+    public void displayApprentices(Mage mage,String indentation) {
+
+        System.out.println(indentation +  mage);
+        if (!mage.getApprentices().isEmpty()) {
+            for (Mage m : mage.getApprentices()) {
+                displayApprentices(m,indentation+"-");
+            }
+        }
+
+    }
+}
Index: src/main/java/Jandy/Krystian/character/view/EmployeeView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Jandy/Krystian/character/view/EmployeeView.java b/src/main/java/Jandy/Krystian/character/view/EmployeeView.java
new file mode 100644
--- /dev/null	(date 1646834179139)
+++ b/src/main/java/Jandy/Krystian/character/view/EmployeeView.java	(date 1646834179139)
@@ -0,0 +1,44 @@
+package Jandy.Krystian.character.view;
+
+import Jandy.Krystian.character.entity.Employee;
+import Jandy.Krystian.character.service.EmployeeService;
+import Jandy.Krystian.view.View;
+
+import java.util.Map;
+
+public class EmployeeView implements View {
+    private final EmployeeService employeeService;
+
+
+    public EmployeeView(EmployeeService employeeService) {
+        this.employeeService = employeeService;
+    }
+
+    @Override
+    public void display() {
+
+        System.out.println("==========================================\nWidok: ");
+        for (Employee e : employeeService.getAllEmployee()) {
+            displayApprentices(e,"-");
+        }
+        System.out.println("==========================================\n");
+
+        System.out.println("==========================================\nStatystyki: ");
+        for(Map.Entry<Employee,Integer> e : employeeService.createEmployeeServiceStatistics().entrySet()){
+            System.out.println(e.getKey() + " : " + e.getValue());
+        }
+        System.out.println("==========================================\n");
+
+    }
+
+    public void displayApprentices(Employee e,String indentation) {
+
+        System.out.println(indentation +  e);
+        if (!e.getSubordinates().isEmpty()) {
+            for (Employee es : e.getSubordinates()) {
+                displayApprentices(es,indentation+"-");
+            }
+        }
+    }
+}
+
Index: src/main/java/Jandy/Krystian/character/entity/Mage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Jandy/Krystian/character/entity/Mage.java b/src/main/java/Jandy/Krystian/character/entity/Mage.java
new file mode 100644
--- /dev/null	(date 1646760970487)
+++ b/src/main/java/Jandy/Krystian/character/entity/Mage.java	(date 1646760970487)
@@ -0,0 +1,104 @@
+package Jandy.Krystian.character.entity;
+
+import java.util.HashSet;
+import java.util.Objects;
+import java.util.Set;
+import lombok.Builder;
+
+@Builder
+public class Mage implements Comparable<Mage> {
+
+    private String name;
+    private int level;
+    private double power;
+    private Set<Mage> apprentices;
+
+    public Mage(String name, int level, double power, Set<Mage> apprentices) {
+        this.name = name;
+        this.level = level;
+        this.power = power;
+        this.apprentices = apprentices;
+    }
+
+    public void addApprentices(Mage mage) {
+        if(this != mage) apprentices.add(mage);
+        else System.out.printf("Nie mozesz sam byc swoim praktykantem!");
+    }
+
+    public void removeApprentices(Mage mage) {
+        apprentices.remove(mage);
+    }
+
+// compareTo
+    @Override
+    public int compareTo(Mage o) {
+        int ret = name == null
+                ? (o.name == null ? 0 : 1)
+                : name.compareTo(o.name);
+
+        if(ret == 0) ret = level - o.level;
+
+        if(ret == 0) ret = Double.compare(power,o.power);
+
+        return ret;
+    }
+
+// HashCode method
+    @Override
+    public int hashCode() {
+        int result = name == null ? 0 : name.hashCode();
+        result = 31*result+level;
+
+        // Wrapper na Double do wywo≈Çania metody hashCode na klasie Dobule
+        result = 67*result+Double.hashCode(power);
+        return result;
+    }
+
+// equals method
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if(o == null || getClass() != o.getClass()) return false;
+        Mage tmp = (Mage)o;
+        return Objects.equals(name,tmp.name) && level == tmp.level && Double.compare(power,tmp.power) == 0 && Objects.equals(apprentices,tmp.apprentices);
+    }
+
+// toString method
+
+    @Override
+    public String toString(){
+        return "Mage{name='" + name + "', level=" + level + ", power=" + power + "}";
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public int getLevel() {
+        return level;
+    }
+
+    public double getPower() {
+        return power;
+    }
+
+    public Set<Mage> getApprentices() {
+        return apprentices;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public void setLevel(int level) {
+        this.level = level;
+    }
+
+    public void setPower(double power) {
+        this.power = power;
+    }
+
+    public void setApprentices(Set<Mage> apprentices) {
+        this.apprentices = apprentices;
+    }
+}
Index: src/main/java/Jandy/Krystian/character/entity/comparator/EmployeeBySalaryComparator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Jandy/Krystian/character/entity/comparator/EmployeeBySalaryComparator.java b/src/main/java/Jandy/Krystian/character/entity/comparator/EmployeeBySalaryComparator.java
new file mode 100644
--- /dev/null	(date 1646834926895)
+++ b/src/main/java/Jandy/Krystian/character/entity/comparator/EmployeeBySalaryComparator.java	(date 1646834926895)
@@ -0,0 +1,20 @@
+package Jandy.Krystian.character.entity.comparator;
+
+import Jandy.Krystian.character.entity.Employee;
+
+import java.util.Comparator;
+
+public class EmployeeBySalaryComparator implements Comparator<Employee> {
+    @Override
+    public int compare(Employee e1, Employee e2){
+
+        int ret = Double.compare(e1.getSalary(),e2.getSalary());
+        if (ret == 0) {
+            ret = e1.getName() == null
+                    ? (e2.getName() == null ? 0 : 1)
+                    : e1.getName().compareTo(e2.getName());
+        }
+
+        return ret;
+    }
+}
Index: src/main/java/Jandy/Krystian/character/entity/comparator/MageByLevelComparator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Jandy/Krystian/character/entity/comparator/MageByLevelComparator.java b/src/main/java/Jandy/Krystian/character/entity/comparator/MageByLevelComparator.java
new file mode 100644
--- /dev/null	(date 1646763594151)
+++ b/src/main/java/Jandy/Krystian/character/entity/comparator/MageByLevelComparator.java	(date 1646763594151)
@@ -0,0 +1,21 @@
+package Jandy.Krystian.character.entity.comparator;
+
+import Jandy.Krystian.character.entity.Mage;
+
+import java.util.Comparator;
+
+public class MageByLevelComparator implements Comparator<Mage> {
+
+    @Override
+    public int compare(Mage m1, Mage m2){
+        int ret = m2.getLevel() - m1.getLevel();
+        if(ret == 0) 
+            ret = m1.getName() == null 
+                    ? (m2.getName() == null ? 0 : 1) 
+                    : m1.getName().compareTo(m2.getName());
+        
+        if (ret == 0) ret = Double.compare(m1.getPower(),m2.getPower());
+        
+        return ret;
+    }
+}
Index: src/main/java/Jandy/Krystian/session/worker/Boss.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Jandy/Krystian/session/worker/Boss.java b/src/main/java/Jandy/Krystian/session/worker/Boss.java
new file mode 100644
--- /dev/null	(date 1647120685630)
+++ b/src/main/java/Jandy/Krystian/session/worker/Boss.java	(date 1647120685630)
@@ -0,0 +1,27 @@
+package Jandy.Krystian.session.worker;
+
+import Jandy.Krystian.session.quest.QuestBoard;
+import Jandy.Krystian.session.quest.QuestGenerator;
+import lombok.AccessLevel;
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+
+@AllArgsConstructor(access = AccessLevel.PRIVATE)
+@Builder
+public class Boss implements Runnable {
+    private QuestBoard questBoard;
+    private QuestGenerator questGenerator;
+
+    @Override
+    public void run() {
+        while(!Thread.interrupted()){
+            try {
+                System.out.println("Boss puts new tasks on the board");
+                questBoard.put(questGenerator.generate(5));
+                Thread.sleep(10000);
+            } catch (InterruptedException ex) {
+                break;
+            }
+        }
+    }
+}
Index: src/main/java/Jandy/Krystian/character/entity/Employee.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Jandy/Krystian/character/entity/Employee.java b/src/main/java/Jandy/Krystian/character/entity/Employee.java
new file mode 100644
--- /dev/null	(date 1646833154203)
+++ b/src/main/java/Jandy/Krystian/character/entity/Employee.java	(date 1646833154203)
@@ -0,0 +1,120 @@
+package Jandy.Krystian.character.entity;
+
+import java.util.Set;
+import java.util.Objects;
+import lombok.Builder;
+
+@Builder
+public class Employee implements Comparable<Employee> {
+    private String name;
+    private String jobTitle;
+    private String department;
+    private int clearanceLevel;
+    private Double salary;
+    Set<Employee> subordinates;
+
+    public Employee(String name, String jobTitle, String department, int clearanceLevel, Double salary, Set<Employee> subordinates) {
+        this.name = name;
+        this.jobTitle = jobTitle;
+        this.department = department;
+        this.clearanceLevel = clearanceLevel;
+        this.salary = salary;
+        this.subordinates = subordinates;
+    }
+    public void addSubordinates(Employee e) {
+        if(this != e) subordinates.add(e);
+        else System.out.printf("Nie mozesz sam byc swoim praktykantem!");
+    }
+
+    public void removeSubordinates(Employee e) {
+        subordinates.remove(e);
+    }
+    // compareTo
+    @Override
+    public int compareTo(Employee o) {
+        int ret = name == null
+                ? (o.name == null ? 0 : 1)
+                : name.compareTo(o.name);
+        return ret;
+    }
+
+    // HashCode method
+    @Override
+    public int hashCode() {
+        int result = name == null ? 0 : name.hashCode();
+        result += jobTitle == null ? 0 : 31*jobTitle.hashCode();
+        result += department == null ? 0 : 31*department.hashCode();
+        result = 31*result+clearanceLevel;
+
+        result = 67*result+Double.hashCode(salary);
+        return result;
+    }
+
+    // equals method
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        Employee employee = (Employee) o;
+        return clearanceLevel == employee.clearanceLevel && Objects.equals(name, employee.name) && Objects.equals(jobTitle, employee.jobTitle) && Objects.equals(department, employee.department) && Objects.equals(salary, employee.salary) && Objects.equals(subordinates, employee.subordinates);
+    }
+
+    @Override
+    public String toString() {
+        return "Employee{" +
+                "name='" + name + '\'' +
+                ", jobTitle='" + jobTitle + '\'' +
+                ", department='" + department + '\'' +
+                ", clearanceLevel=" + clearanceLevel +
+                ", salary=" + salary +
+                '}';
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public String getJobTitle() {
+        return jobTitle;
+    }
+
+    public String getDepartment() {
+        return department;
+    }
+
+    public int getClearanceLevel() {
+        return clearanceLevel;
+    }
+
+    public Double getSalary() {
+        return salary;
+    }
+
+    public Set<Employee> getSubordinates() {
+        return subordinates;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public void setJobTitle(String jobTitle) {
+        this.jobTitle = jobTitle;
+    }
+
+    public void setDepartment(String department) {
+        this.department = department;
+    }
+
+    public void setClearanceLevel(int clearanceLevel) {
+        this.clearanceLevel = clearanceLevel;
+    }
+
+    public void setSalary(Double salary) {
+        this.salary = salary;
+    }
+
+    public void setSubordinates(Set<Employee> subordinates) {
+        this.subordinates = subordinates;
+    }
+}
Index: src/main/java/Jandy/Krystian/character/service/EmployeeService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Jandy/Krystian/character/service/EmployeeService.java b/src/main/java/Jandy/Krystian/character/service/EmployeeService.java
new file mode 100644
--- /dev/null	(date 1646834179115)
+++ b/src/main/java/Jandy/Krystian/character/service/EmployeeService.java	(date 1646834179115)
@@ -0,0 +1,82 @@
+package Jandy.Krystian.character.service;
+
+import Jandy.Krystian.character.entity.Employee;
+import Jandy.Krystian.character.entity.comparator.EmployeeBySalaryComparator;
+import Jandy.Krystian.character.repository.EmployeeRepository;
+
+import java.util.*;
+
+public class EmployeeService {
+    private  final EmployeeRepository employeeRepository;
+    private final String option;
+
+    public EmployeeService(EmployeeRepository employeeRepository, String option) {
+        this.employeeRepository = employeeRepository;
+        this.option = option;
+    }
+
+    public List<Employee> getAllEmployee(){
+        return employeeRepository.getAll();
+    }
+
+    public String getOption(){
+        return option;
+    }
+
+    public Set<Employee> createSubordinates(){
+        if (option.equalsIgnoreCase("no sort")) {
+            return new HashSet<Employee>();
+        }
+        else if (option.equalsIgnoreCase("sort")) {
+            return new TreeSet<Employee>();
+        }
+        else if (option.equalsIgnoreCase("alternative sort")) {
+            return new TreeSet<Employee>(new EmployeeBySalaryComparator());
+        }
+        return new HashSet<Employee>();
+    }
+
+    public Map<Employee,Integer> createMapStatistics(){
+        if (option.equalsIgnoreCase("no sort")) {
+            return new HashMap<Employee,Integer>();
+        }
+        else if (option.equalsIgnoreCase("sort")) {
+            return new TreeMap<Employee,Integer>();
+        }
+        else if (option.equalsIgnoreCase("alternative sort")) {
+            return new TreeMap<Employee,Integer>(new EmployeeBySalaryComparator());
+        }
+        return new HashMap<Employee,Integer>();
+    }
+
+    public void add(Employee e){
+        employeeRepository.add(e);
+    }
+
+    public void delete(Employee e) {
+        employeeRepository.delete(e);
+    }
+
+    public int count(Employee e,Map<Employee,Integer> map, int counter){
+
+        if (!e.getSubordinates().isEmpty()) {
+            for (Employee m : e.getSubordinates()) {
+                counter += count(m,map,0);
+            }
+        }
+        map.put(e,counter++);
+
+        return counter;
+    }
+
+    public Map<Employee,Integer> createEmployeeServiceStatistics(){
+        Map<Employee,Integer> map = createMapStatistics();
+        for(Employee e : employeeRepository.getAll()) {
+            count(e,map,0);
+        }
+        return map;
+    }
+
+
+}
+
Index: src/main/java/Jandy/Krystian/character/service/MageService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Jandy/Krystian/character/service/MageService.java b/src/main/java/Jandy/Krystian/character/service/MageService.java
new file mode 100644
--- /dev/null	(date 1646771832180)
+++ b/src/main/java/Jandy/Krystian/character/service/MageService.java	(date 1646771832180)
@@ -0,0 +1,79 @@
+package Jandy.Krystian.character.service;
+
+import Jandy.Krystian.character.entity.Mage;
+import Jandy.Krystian.character.entity.comparator.MageByLevelComparator;
+import Jandy.Krystian.character.repository.MageRepository;
+
+import java.util.*;
+
+public class MageService {
+    private final MageRepository mageRepository;
+    private final String option;
+
+    public MageService( MageRepository mageRepository, String option) {
+        this.mageRepository = mageRepository;
+        this.option = option;
+    }
+
+    public List<Mage> getAllMage(){
+        return mageRepository.getAll();
+    }
+
+    public String getOption() {
+        return option;
+    }
+
+    public Set<Mage> createApprentices(){
+        if (option.equalsIgnoreCase("no sort")) {
+            return new HashSet<Mage>();
+        }
+        else if (option.equalsIgnoreCase("sort")) {
+            return new TreeSet<Mage>();
+        }
+        else if (option.equalsIgnoreCase("alternative sort")) {
+            return new TreeSet<Mage>(new MageByLevelComparator());
+        }
+        return new HashSet<Mage>();
+    }
+
+    public Map<Mage,Integer> createMapStatistics(){
+        if (option.equalsIgnoreCase("no sort")) {
+            return new HashMap<Mage,Integer>();
+        }
+        else if (option.equalsIgnoreCase("sort")) {
+            return new TreeMap<Mage,Integer>();
+        }
+        else if (option.equalsIgnoreCase("alternative sort")) {
+            return new TreeMap<Mage,Integer>(new MageByLevelComparator());
+        }
+        return new HashMap<Mage,Integer>();
+    }
+
+    public void add(Mage mage){
+        mageRepository.add(mage);
+    }
+
+    public void delete(Mage mage){
+        mageRepository.delete(mage);
+    }
+
+    public int count(Mage mage,Map<Mage,Integer> map, int counter){
+
+        if (!mage.getApprentices().isEmpty()) {
+            for (Mage m : mage.getApprentices()) {
+                counter += count(m,map,0);
+            }
+        }
+        map.put(mage,counter++);
+
+        return counter;
+    }
+
+    public Map<Mage,Integer> createMageServiceStatistics(){
+        Map<Mage,Integer> map = createMapStatistics();
+        for(Mage mage : mageRepository.getAll()) {
+            count(mage,map,0);
+        }
+        return map;
+    }
+}
Index: src/main/java/Jandy/Krystian/character/initialize/TestInitialize.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Jandy/Krystian/character/initialize/TestInitialize.java b/src/main/java/Jandy/Krystian/character/initialize/TestInitialize.java
new file mode 100644
--- /dev/null	(date 1647110427456)
+++ b/src/main/java/Jandy/Krystian/character/initialize/TestInitialize.java	(date 1647110427456)
@@ -0,0 +1,91 @@
+package Jandy.Krystian.character.initialize;
+
+import Jandy.Krystian.character.entity.Employee;
+import Jandy.Krystian.character.entity.Mage;
+import Jandy.Krystian.character.service.EmployeeService;
+import Jandy.Krystian.character.service.MageService;
+
+public class TestInitialize {
+
+//    private final MageService mageService;
+    private EmployeeService employeeService;
+    private MageService mageService;
+
+    public TestInitialize(EmployeeService employeeService) {
+        this.employeeService = employeeService;
+    }
+
+    public TestInitialize(MageService mageService) {
+        this.mageService= mageService;
+    }
+
+    public void init(){
+
+        if(employeeService != null) {
+            Employee e1 = Employee.builder().name("Adams").jobTitle("Informatyk").subordinates(employeeService.createSubordinates()).clearanceLevel(3).salary(5000.25).department("Tech").build();
+            Employee e2 = Employee.builder().name("Luiz").jobTitle("Szef").subordinates(employeeService.createSubordinates()).clearanceLevel(99).salary(1000000.99).department("Tech").build();
+            Employee e3 = Employee.builder().name("Patric").jobTitle("Agent").subordinates(employeeService.createSubordinates()).clearanceLevel(13).salary(15000.25).department("Ubez").build();
+            Employee e4 = Employee.builder().name("Waldemard").jobTitle("Prezes").subordinates(employeeService.createSubordinates()).clearanceLevel(43).salary(16000.45).department("Polityk").build();
+            Employee e5 = Employee.builder().name("Cris").jobTitle("Programista").subordinates(employeeService.createSubordinates()).clearanceLevel(63).salary(50000.15).department("Python").build();
+            Employee e6 = Employee.builder().name("Max").jobTitle("Programista").subordinates(employeeService.createSubordinates()).clearanceLevel(73).salary(35000.85).department("C++").build();
+            Employee e7 = Employee.builder().name("Sajmon").jobTitle("Agent").subordinates(employeeService.createSubordinates()).clearanceLevel(83).salary(25000.95).department("JAVA").build();
+            Employee e8 = Employee.builder().name("Garry").jobTitle("Prawnik").subordinates(employeeService.createSubordinates()).clearanceLevel(93).salary(15000.15).department("JAVA").build();
+            Employee e9 = Employee.builder().name("Robert").jobTitle("Agent").subordinates(employeeService.createSubordinates()).clearanceLevel(23).salary(45000.05).department("C++").build();
+            Employee e10 = Employee.builder().name("Brayan").jobTitle("Ksiƒôgowy").subordinates(employeeService.createSubordinates()).clearanceLevel(12).salary(15000.35).department("Python").build();
+
+            employeeService.add(e1);
+            e1.addSubordinates(e9);
+
+            employeeService.add(e2);
+            e2.addSubordinates(e3);
+            e2.addSubordinates(e4);
+            e4.addSubordinates(e6);
+            e4.addSubordinates(e7);
+            e4.addSubordinates(e8);
+            e2.addSubordinates(e5);
+
+            employeeService.add(e10);
+
+        }
+        else if(mageService != null) {
+
+            Mage mageArnold = Mage.builder().level(99).name("Arnold").power(999.99).apprentices(mageService.createApprentices()).build();
+
+            Mage mageHarry = Mage.builder().level(18).name("Harry").power(123.12).apprentices(mageService.createApprentices()).build();
+
+            Mage mageBrayan = Mage.builder().level(31).name("Brayan").power(332.16).apprentices(mageService.createApprentices()).build();
+
+            Mage mageAdam = Mage.builder().level(10).name("Adam").power(50.99).apprentices(mageService.createApprentices()).build();
+
+            Mage mageGary = Mage.builder().level(999).name("Gary").power(9999.999).apprentices(mageService.createApprentices()).build();
+
+            Mage mageHaldor = Mage.builder().level(200).name("Halord").power(299.81).apprentices(mageService.createApprentices()).build();
+
+            Mage mageAgatha = Mage.builder().level(800).name("Agatha").power(9980.11).apprentices(mageService.createApprentices()).build();
+
+            Mage mageChristina = Mage.builder().level(18).name("Christina").power(113.12).apprentices(mageService.createApprentices()).build();
+
+            Mage mageLarry = Mage.builder().level(21).name("Larry").power(21.12).apprentices(mageService.createApprentices()).build();
+
+            Mage mageHoracy = Mage.builder().level(188).name("Horacy").power(188.18).apprentices(mageService.createApprentices()).build();
+
+            mageService.add(mageGary);
+            mageService.add(mageHaldor);
+            mageService.add(mageHoracy);
+
+            mageGary.addApprentices(mageAgatha);
+            mageGary.addApprentices(mageAdam);
+            mageGary.addApprentices(mageArnold);
+
+            mageAgatha.addApprentices(mageHarry);
+            mageAgatha.addApprentices(mageBrayan);
+            mageAgatha.addApprentices(mageChristina);
+
+            mageHarry.addApprentices(mageBrayan);
+            mageHarry.addApprentices(mageChristina);
+
+            mageHaldor.addApprentices(mageLarry);
+        }
+
+    }
+}
Index: src/main/java/Jandy/Krystian/character/repository/MageRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Jandy/Krystian/character/repository/MageRepository.java b/src/main/java/Jandy/Krystian/character/repository/MageRepository.java
new file mode 100644
--- /dev/null	(date 1646760172991)
+++ b/src/main/java/Jandy/Krystian/character/repository/MageRepository.java	(date 1646760172991)
@@ -0,0 +1,24 @@
+package Jandy.Krystian.character.repository;
+
+import Jandy.Krystian.character.entity.Mage;
+import Jandy.Krystian.character.entity.comparator.MageByLevelComparator;
+import Jandy.Krystian.character.service.MageService;
+import Jandy.Krystian.repository.MemoryRepository;
+
+import java.util.Comparator;
+
+public class MageRepository extends MemoryRepository<Mage> {
+
+
+    public MageRepository() {
+    }
+
+    public MageRepository(boolean sort) {
+        super(sort);
+    }
+
+    public MageRepository(Comparator comparator) {
+        super(comparator);
+    }
+
+}
Index: src/main/java/Jandy/Krystian/session/result/ResultWriter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Jandy/Krystian/session/result/ResultWriter.java b/src/main/java/Jandy/Krystian/session/result/ResultWriter.java
new file mode 100644
--- /dev/null	(date 1647176004544)
+++ b/src/main/java/Jandy/Krystian/session/result/ResultWriter.java	(date 1647176004544)
@@ -0,0 +1,18 @@
+package Jandy.Krystian.session.result;
+
+
+import java.util.TreeMap;
+import lombok.Getter;
+import lombok.Setter;
+import lombok.NoArgsConstructor;
+
+@NoArgsConstructor
+@Getter
+@Setter
+public class ResultWriter {
+    private TreeMap<Integer,Boolean> results = new TreeMap<>();
+
+    public synchronized void save(Integer number, Boolean result) {
+        results.put(number,result);
+    }
+}
Index: src/main/java/Jandy/Krystian/character/repository/EmployeeRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Jandy/Krystian/character/repository/EmployeeRepository.java b/src/main/java/Jandy/Krystian/character/repository/EmployeeRepository.java
new file mode 100644
--- /dev/null	(date 1646833233952)
+++ b/src/main/java/Jandy/Krystian/character/repository/EmployeeRepository.java	(date 1646833233952)
@@ -0,0 +1,19 @@
+package Jandy.Krystian.character.repository;
+
+import Jandy.Krystian.character.entity.Employee;
+import Jandy.Krystian.character.entity.Mage;
+import Jandy.Krystian.repository.MemoryRepository;
+
+import java.util.Comparator;
+
+public class EmployeeRepository extends MemoryRepository<Employee> {
+    public EmployeeRepository(){
+    }
+    public EmployeeRepository(boolean sort){
+        super(sort);
+    }
+    public EmployeeRepository(Comparator comparator) {
+        super(comparator);
+    }
+}
+
Index: src/main/java/Jandy/Krystian/session/service/SessionService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Jandy/Krystian/session/service/SessionService.java b/src/main/java/Jandy/Krystian/session/service/SessionService.java
new file mode 100644
--- /dev/null	(date 1647169609053)
+++ b/src/main/java/Jandy/Krystian/session/service/SessionService.java	(date 1647169609053)
@@ -0,0 +1,69 @@
+package Jandy.Krystian.session.service;
+
+import Jandy.Krystian.character.entity.Employee;
+import Jandy.Krystian.character.service.EmployeeService;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+
+import Jandy.Krystian.session.quest.QuestBoard;
+import Jandy.Krystian.session.quest.QuestGenerator;
+import Jandy.Krystian.session.result.ResultWriter;
+import Jandy.Krystian.session.worker.Boss;
+import Jandy.Krystian.session.worker.Worker;
+import lombok.Getter;
+import lombok.Setter;
+import lombok.Builder;
+import lombok.NoArgsConstructor;
+import lombok.AllArgsConstructor;
+import Jandy.Krystian.thread.Killer;
+
+@Getter
+@Setter
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class SessionService {
+    private Integer counts;
+    private ArrayList<Thread> threads;
+    private QuestBoard questBoard;
+    private QuestGenerator questGenerator;
+    private List<Worker> workers;
+    private ResultWriter resultWriter;
+
+    Boss boss;
+    public SessionService(Integer counts) {
+        this.counts = counts;
+        this.threads = new ArrayList<>();
+        this.resultWriter = new ResultWriter();
+    }
+
+    public void startGenericSession() {
+        this.questGenerator = new QuestGenerator();
+        this.questBoard = new QuestBoard();
+        this.boss = Boss.builder()
+                .questGenerator(this.questGenerator)
+                .questBoard(this.questBoard)
+                .build();
+
+        this.workers = new ArrayList<>(2*this.counts);
+        for (int i=0; i<this.counts; i++) {
+            this.workers.add(Worker.builder()
+                    .questBoard(questBoard)
+                    .workerName("Worker[" + String.valueOf(i)+"]")
+                    .resultWriter(resultWriter)
+                    .build());
+        }
+
+        this.threads.add(new Thread(this.boss));
+
+        for (Worker w : this.workers) {
+            this.threads.add(new Thread(w));
+        }
+
+
+        for(Thread t : this.threads) t.start();
+
+    }
+}
Index: src/main/java/Jandy/Krystian/MageLaboratory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Jandy/Krystian/MageLaboratory.java b/src/main/java/Jandy/Krystian/MageLaboratory.java
new file mode 100644
--- /dev/null	(date 1647110375898)
+++ b/src/main/java/Jandy/Krystian/MageLaboratory.java	(date 1647110375898)
@@ -0,0 +1,42 @@
+package Jandy.Krystian;
+import Jandy.Krystian.character.entity.comparator.MageByLevelComparator;
+import Jandy.Krystian.character.initialize.TestInitialize;
+import Jandy.Krystian.character.repository.MageRepository;
+import Jandy.Krystian.character.service.MageService;
+import Jandy.Krystian.character.view.MageView;
+import Jandy.Krystian.view.View;
+
+public class MageLaboratory {
+
+    public static void main(String[] args) {
+        String argument = (args.length == 1) ? args[0] : null;
+        MageLaboratory application = new MageLaboratory();
+
+        MageService mageService = application.createMageService(argument);
+        TestInitialize testInitialize = new TestInitialize(mageService);
+        testInitialize.init();
+
+        View mageView = new MageView(mageService);
+        mageView.display();
+    }
+
+    public MageService createMageService(String argument){
+        if (argument == null) {
+            return new MageService(new MageRepository(),argument);
+        }
+        else if (argument.equalsIgnoreCase("no sort")) {
+            return new MageService(new MageRepository(false),argument);
+        }
+        else if (argument.equalsIgnoreCase("sort")) {
+            return new MageService(new MageRepository(true),argument);
+        }
+        else if (argument.equalsIgnoreCase("alternative sort")) {
+            return new MageService(new MageRepository(new MageByLevelComparator()),argument);
+        }
+        else {
+            return new MageService(new MageRepository(),argument);
+        }
+    }
+}
+
+
Index: src/main/java/Jandy/Krystian/repository/MemoryRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Jandy/Krystian/repository/MemoryRepository.java b/src/main/java/Jandy/Krystian/repository/MemoryRepository.java
new file mode 100644
--- /dev/null	(date 1646763444194)
+++ b/src/main/java/Jandy/Krystian/repository/MemoryRepository.java	(date 1646763444194)
@@ -0,0 +1,31 @@
+package Jandy.Krystian.repository;
+
+import java.util.*;
+
+public abstract class MemoryRepository <E extends Comparable<E>> {
+    private Set<E> set;
+
+    public MemoryRepository(){
+        set = new HashSet<>();
+    }
+
+    public MemoryRepository(boolean sort) {
+        set = sort ? new TreeSet<>() : new HashSet<>();
+    }
+
+    public MemoryRepository(Comparator<E> comparator){
+        set = new TreeSet<>(comparator);
+    }
+
+    public void add(E element) {
+        set.add(element);
+    }
+
+    public void delete(E element) {
+        set.remove(element);
+    }
+
+    public List<E> getAll() {
+        return new ArrayList<>(set);
+    }
+}
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
new file mode 100644
--- /dev/null	(date 1646673115626)
+++ b/pom.xml	(date 1646673115626)
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+
+    <groupId>org.example</groupId>
+    <artifactId>laboratorium-1</artifactId>
+    <version>1.0-SNAPSHOT</version>
+
+    <properties>
+        <maven.compiler.source>16</maven.compiler.source>
+        <maven.compiler.target>16</maven.compiler.target>
+    </properties>
+
+    <dependencies>
+        <dependency>
+            <groupId>org.projectlombok</groupId>
+            <artifactId>lombok</artifactId>
+            <version>1.18.18</version>
+            <scope>compile</scope>
+        </dependency>
+    </dependencies>
+
+</project>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1647186553377)
+++ b/.idea/vcs.xml	(date 1647186553377)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: src/main/java/Jandy/Krystian/thread/Killer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Jandy/Krystian/thread/Killer.java b/src/main/java/Jandy/Krystian/thread/Killer.java
new file mode 100644
--- /dev/null	(date 1647169323513)
+++ b/src/main/java/Jandy/Krystian/thread/Killer.java	(date 1647169323513)
@@ -0,0 +1,36 @@
+package Jandy.Krystian.thread;
+import lombok.AccessLevel;
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Singular;
+import lombok.extern.java.Log;
+import lombok.Getter;
+import lombok.Setter;
+
+import java.util.List;
+import java.util.logging.Level;
+
+@Getter
+@Setter
+@Log
+@Builder
+@AllArgsConstructor(access = AccessLevel.PRIVATE)
+public class Killer implements Runnable {
+    @Singular
+    private List<Thread> threads;
+
+    @Override
+    public void run() {
+        for(Thread t: threads) {
+            t.interrupt();
+        }
+
+        for(Thread t: threads){
+            try{
+                t.join();
+            } catch (InterruptedException ex) {
+                log.log(Level.WARNING,ex.getMessage(),ex);
+            }
+        }
+    }
+}
Index: src/main/java/Jandy/Krystian/SessionLaboratory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Jandy/Krystian/SessionLaboratory.java b/src/main/java/Jandy/Krystian/SessionLaboratory.java
new file mode 100644
--- /dev/null	(date 1647169608689)
+++ b/src/main/java/Jandy/Krystian/SessionLaboratory.java	(date 1647169608689)
@@ -0,0 +1,81 @@
+package Jandy.Krystian;
+
+import Jandy.Krystian.session.quest.Quest;
+import Jandy.Krystian.session.service.SessionService;
+import Jandy.Krystian.session.view.SessionView;
+
+import java.util.*;
+import java.util.logging.Level;
+
+import Jandy.Krystian.session.worker.Worker;
+import Jandy.Krystian.thread.Killer;
+import lombok.extern.java.Log;
+
+@Log
+public class SessionLaboratory {
+    public void createQuest(){
+
+    }
+    public static void main(String args[]){
+        Scanner scanner = new Scanner(System.in);
+        System.out.println("Enter the number of threads: ");
+        SessionService service = new SessionService(scanner.nextInt());
+        boolean isRunning = true;
+
+
+        service.startGenericSession();
+        SessionView sessionView = new SessionView(service);
+        sessionView.menu();
+
+        scanner.nextLine();
+        String option;
+        while(isRunning) {
+            option = scanner.nextLine();
+            switch (option.toUpperCase()) {
+                case "M":
+                    sessionView.menu();
+                    break;
+                case "P":
+                    sessionView.printResult();
+                    break;
+                case "N":
+                    System.out.println("Enter number to check: ");
+                    Random random = new Random();
+                    service.getQuestBoard().put(List.of(Quest.builder()
+                            .number(scanner.nextInt())
+                            .time(random.nextInt((10) * 1000))
+                            .build()));
+                    System.out.println("Quest is added!\n");
+                    break;
+                case "T":
+                    service.getThreads().add(new Thread(Worker.builder()
+                            .workerName("Worker[" + String.valueOf(service.getThreads().size()-1)+"]")
+                            .questBoard(service.getQuestBoard())
+                            .resultWriter(service.getResultWriter())
+                            .build()
+                    ));
+                    service.getThreads().get(service.getThreads().size()-1).start();
+
+                    System.out.println("Worker is added");
+                    break;
+                case "Q":
+                    try {
+
+                        System.out.println("Session ends");
+                        Thread killer = new Thread(Killer.builder().threads(service.getThreads()).build());
+                        killer.start();
+                        killer.join();
+                        isRunning = false;
+                    } catch (InterruptedException ex) {
+                        log.log(Level.WARNING, ex.getMessage(), ex);
+                    }
+                    break;
+                default:
+                    option = scanner.nextLine();
+                    break;
+            }
+
+        }
+    }
+}
+
Index: src/main/java/Jandy/Krystian/session/view/SessionView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Jandy/Krystian/session/view/SessionView.java b/src/main/java/Jandy/Krystian/session/view/SessionView.java
new file mode 100644
--- /dev/null	(date 1647169909146)
+++ b/src/main/java/Jandy/Krystian/session/view/SessionView.java	(date 1647169909146)
@@ -0,0 +1,40 @@
+package Jandy.Krystian.session.view;
+
+import Jandy.Krystian.session.result.ResultWriter;
+import Jandy.Krystian.session.service.SessionService;
+import Jandy.Krystian.view.View;
+
+import java.util.HashMap;
+import java.util.Map;
+
+public class SessionView implements View {
+
+    private SessionService sessionService;
+
+    public SessionView(SessionService sessionService) {
+        this.sessionService = sessionService;
+    }
+
+    public void menu() {
+        System.out.println(" ================ MENU ================ ");
+        System.out.println("==> Q - Quit");
+        System.out.println("==> N - New task");
+        System.out.println("==> T - Add thread");
+        System.out.println("==> M - Menu option");
+        System.out.println("==> P - Print results");
+        System.out.println("================================================");
+    }
+
+    public void printResult(){
+        System.out.println("| Number | Prime number |");
+        for(Map.Entry<Integer,Boolean> entry : sessionService.getResultWriter().getResults().entrySet()) {
+            System.out.println("\t" + entry.getKey() + "\t\t   " + entry.getValue());
+        }
+    }
+
+    @Override
+    public void display() {
+
+    }
+
+}
Index: src/main/java/Jandy/Krystian/EmployeeLaboratory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Jandy/Krystian/EmployeeLaboratory.java b/src/main/java/Jandy/Krystian/EmployeeLaboratory.java
new file mode 100644
--- /dev/null	(date 1647110367435)
+++ b/src/main/java/Jandy/Krystian/EmployeeLaboratory.java	(date 1647110367435)
@@ -0,0 +1,43 @@
+package Jandy.Krystian;
+
+import Jandy.Krystian.character.entity.Employee;
+import Jandy.Krystian.character.entity.comparator.EmployeeBySalaryComparator;
+import Jandy.Krystian.character.initialize.TestInitialize;
+import Jandy.Krystian.character.repository.EmployeeRepository;
+import Jandy.Krystian.character.service.EmployeeService;
+import Jandy.Krystian.character.view.EmployeeView;
+import Jandy.Krystian.view.View;
+
+public class EmployeeLaboratory {
+
+    public static void main(String[] args) {
+        String argument = (args.length == 1) ? args[0] : null;
+        EmployeeLaboratory application = new EmployeeLaboratory();
+
+        EmployeeService employeeService = application.createEmployeeService(argument);
+        TestInitialize testInitialize = new TestInitialize(employeeService);
+        testInitialize.init();
+
+        View employeeView = new EmployeeView(employeeService);
+        employeeView.display();
+    }
+
+    public EmployeeService createEmployeeService(String argument){
+        if (argument == null) {
+            return new EmployeeService(new EmployeeRepository(),argument);
+        }
+        else if (argument.equalsIgnoreCase("no sort")) {
+            return new EmployeeService(new EmployeeRepository(false),argument);
+        }
+        else if (argument.equalsIgnoreCase("sort")) {
+            return new EmployeeService(new EmployeeRepository(true),argument);
+        }
+        else if (argument.equalsIgnoreCase("alternative sort")) {
+            return new EmployeeService(new EmployeeRepository(new EmployeeBySalaryComparator()),argument);
+        }
+        else {
+            return new EmployeeService(new EmployeeRepository(),argument);
+        }
+    }
+
+}
Index: .idea/uiDesigner.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/uiDesigner.xml b/.idea/uiDesigner.xml
new file mode 100644
--- /dev/null	(date 1647110212943)
+++ b/.idea/uiDesigner.xml	(date 1647110212943)
@@ -0,0 +1,124 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Palette2">
+    <group name="Swing">
+      <item class="com.intellij.uiDesigner.HSpacer" tooltip-text="Horizontal Spacer" icon="/com/intellij/uiDesigner/icons/hspacer.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="1" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="com.intellij.uiDesigner.VSpacer" tooltip-text="Vertical Spacer" icon="/com/intellij/uiDesigner/icons/vspacer.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="1" anchor="0" fill="2" />
+      </item>
+      <item class="javax.swing.JPanel" icon="/com/intellij/uiDesigner/icons/panel.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JScrollPane" icon="/com/intellij/uiDesigner/icons/scrollPane.png" removable="false" auto-create-binding="false" can-attach-label="true">
+        <default-constraints vsize-policy="7" hsize-policy="7" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JButton" icon="/com/intellij/uiDesigner/icons/button.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="0" fill="1" />
+        <initial-values>
+          <property name="text" value="Button" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JRadioButton" icon="/com/intellij/uiDesigner/icons/radioButton.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="RadioButton" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JCheckBox" icon="/com/intellij/uiDesigner/icons/checkBox.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="CheckBox" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JLabel" icon="/com/intellij/uiDesigner/icons/label.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="Label" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JTextField" icon="/com/intellij/uiDesigner/icons/textField.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JPasswordField" icon="/com/intellij/uiDesigner/icons/passwordField.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JFormattedTextField" icon="/com/intellij/uiDesigner/icons/formattedTextField.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextArea" icon="/com/intellij/uiDesigner/icons/textArea.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextPane" icon="/com/intellij/uiDesigner/icons/textPane.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JEditorPane" icon="/com/intellij/uiDesigner/icons/editorPane.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JComboBox" icon="/com/intellij/uiDesigner/icons/comboBox.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="2" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JTable" icon="/com/intellij/uiDesigner/icons/table.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JList" icon="/com/intellij/uiDesigner/icons/list.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="2" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTree" icon="/com/intellij/uiDesigner/icons/tree.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTabbedPane" icon="/com/intellij/uiDesigner/icons/tabbedPane.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSplitPane" icon="/com/intellij/uiDesigner/icons/splitPane.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSpinner" icon="/com/intellij/uiDesigner/icons/spinner.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSlider" icon="/com/intellij/uiDesigner/icons/slider.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSeparator" icon="/com/intellij/uiDesigner/icons/separator.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JProgressBar" icon="/com/intellij/uiDesigner/icons/progressbar.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JToolBar" icon="/com/intellij/uiDesigner/icons/toolbar.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1">
+          <preferred-size width="-1" height="20" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JToolBar$Separator" icon="/com/intellij/uiDesigner/icons/toolbarSeparator.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JScrollBar" icon="/com/intellij/uiDesigner/icons/scrollbar.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="0" anchor="0" fill="2" />
+      </item>
+    </group>
+  </component>
+</project>
\ No newline at end of file
Index: src/main/java/Jandy/Krystian/session/quest/Quest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Jandy/Krystian/session/quest/Quest.java b/src/main/java/Jandy/Krystian/session/quest/Quest.java
new file mode 100644
--- /dev/null	(date 1647120685619)
+++ b/src/main/java/Jandy/Krystian/session/quest/Quest.java	(date 1647120685619)
@@ -0,0 +1,24 @@
+package Jandy.Krystian.session.quest;
+
+import lombok.AccessLevel;
+import lombok.AllArgsConstructor;
+import lombok.NoArgsConstructor;
+import lombok.Builder;
+import lombok.ToString;
+import lombok.EqualsAndHashCode;
+import lombok.Setter;
+import lombok.Getter;
+
+@Getter
+@Setter
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor(access = AccessLevel.PRIVATE)
+@ToString
+@EqualsAndHashCode
+public class Quest {
+    private int number;
+    private long time;
+
+
+}
Index: src/main/java/Jandy/Krystian/session/quest/QuestGenerator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Jandy/Krystian/session/quest/QuestGenerator.java b/src/main/java/Jandy/Krystian/session/quest/QuestGenerator.java
new file mode 100644
--- /dev/null	(date 1647127043233)
+++ b/src/main/java/Jandy/Krystian/session/quest/QuestGenerator.java	(date 1647127043233)
@@ -0,0 +1,28 @@
+package Jandy.Krystian.session.quest;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Random;
+
+public class QuestGenerator {
+
+    public Quest generate() {
+        Random random = new Random();
+        return Quest.builder()
+                .number(random.nextInt(1000))
+                .time(random.nextInt(10)*1000)
+                .build();
+    }
+
+    public List<Quest> generate(int n) {
+        Random random = new Random();
+        List<Quest> quests = new ArrayList<>();
+        for(int i=0; i<n; i++) {
+            quests.add(Quest.builder()
+                    .number(random.nextInt(1000))
+                    .time(random.nextInt(10) * 1000)
+                    .build());
+        }
+        return quests;
+    }
+}
Index: src/main/java/Jandy/Krystian/session/quest/QuestBoard.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Jandy/Krystian/session/quest/QuestBoard.java b/src/main/java/Jandy/Krystian/session/quest/QuestBoard.java
new file mode 100644
--- /dev/null	(date 1647120685584)
+++ b/src/main/java/Jandy/Krystian/session/quest/QuestBoard.java	(date 1647120685584)
@@ -0,0 +1,21 @@
+package Jandy.Krystian.session.quest;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class QuestBoard {
+    private List<Quest> quests = new ArrayList<>();
+
+    public synchronized  Quest take() throws InterruptedException {
+        while(quests.isEmpty()){
+            wait();
+        }
+        return quests.remove(0);
+    }
+
+    public synchronized void put(List<Quest> quests) {
+        this.quests.addAll(quests);
+        notifyAll();
+    }
+
+}
Index: .idea/jarRepositories.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/jarRepositories.xml b/.idea/jarRepositories.xml
new file mode 100644
--- /dev/null	(date 1647109322866)
+++ b/.idea/jarRepositories.xml	(date 1647109322866)
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="RemoteRepositoriesConfiguration">
+    <remote-repository>
+      <option name="id" value="central" />
+      <option name="name" value="Central Repository" />
+      <option name="url" value="https://repo.maven.apache.org/maven2" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="central" />
+      <option name="name" value="Maven Central repository" />
+      <option name="url" value="https://repo1.maven.org/maven2" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="jboss.community" />
+      <option name="name" value="JBoss Community repository" />
+      <option name="url" value="https://repository.jboss.org/nexus/content/repositories/public/" />
+    </remote-repository>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
new file mode 100644
--- /dev/null	(date 1647268829506)
+++ b/.idea/compiler.xml	(date 1647268829506)
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CompilerConfiguration">
+    <annotationProcessing>
+      <profile default="true" name="Default" enabled="true" />
+      <profile name="Maven default annotation processors profile" enabled="true">
+        <sourceOutputDir name="target/generated-sources/annotations" />
+        <sourceTestOutputDir name="target/generated-test-sources/test-annotations" />
+        <outputRelativeToContentRoot value="true" />
+        <module name="laboratory-2" />
+      </profile>
+    </annotationProcessing>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1647109324741)
+++ b/.idea/.gitignore	(date 1647109324741)
@@ -0,0 +1,8 @@
+# Default ignored files
+/shelf/
+/workspace.xml
+# Editor-based HTTP Client requests
+/httpRequests/
+# Datasource local storage ignored files
+/dataSources/
+/dataSources.local.xml
Index: src/main/java/Jandy/Krystian/session/worker/Worker.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Jandy/Krystian/session/worker/Worker.java b/src/main/java/Jandy/Krystian/session/worker/Worker.java
new file mode 100644
--- /dev/null	(date 1647176004597)
+++ b/src/main/java/Jandy/Krystian/session/worker/Worker.java	(date 1647176004597)
@@ -0,0 +1,40 @@
+package Jandy.Krystian.session.worker;
+
+import Jandy.Krystian.session.quest.Quest;
+import Jandy.Krystian.session.quest.QuestBoard;
+import Jandy.Krystian.session.result.ResultWriter;
+import lombok.Builder;
+import lombok.AllArgsConstructor;
+import lombok.extern.java.Log;
+
+@Log
+@Builder
+@AllArgsConstructor
+public class Worker implements Runnable{
+    private QuestBoard questBoard;
+    private String workerName;
+    private ResultWriter resultWriter;
+    @Override
+    public void run() {
+        while(!Thread.interrupted()){
+            try{
+                boolean isPrimeNumber = true;
+                Quest quest = questBoard.take();
+                System.out.println("Worker " + workerName + " get " + String.valueOf(quest.getNumber()) + " to calculate!");
+
+                for(int i=2; i<quest.getNumber();i++) {
+                    if(quest.getNumber()%i == 0) {
+                        isPrimeNumber = false;
+                        break;
+                    }
+                }
+                Thread.sleep(quest.getTime());
+                System.out.println("Worker " + workerName + " has finished calculating, next step is save");
+                resultWriter.save(quest.getNumber(),isPrimeNumber);
+                System.out.println("Worker " + workerName + " saved result and finished his work. Now he waiting for new work...");
+            } catch(InterruptedException ex){
+                break;
+            }
+        }
+    }
+}
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1647109322849)
+++ b/.idea/misc.xml	(date 1647109322849)
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ExternalStorageConfigurationManager" enabled="true" />
+  <component name="MavenProjectsManager">
+    <option name="originalFiles">
+      <list>
+        <option value="$PROJECT_DIR$/pom.xml" />
+      </list>
+    </option>
+  </component>
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_16" default="true" project-jdk-name="16" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
Index: src/main/java/Jandy/Krystian/view/View.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Jandy/Krystian/view/View.java b/src/main/java/Jandy/Krystian/view/View.java
new file mode 100644
--- /dev/null	(date 1646684106028)
+++ b/src/main/java/Jandy/Krystian/view/View.java	(date 1646684106028)
@@ -0,0 +1,5 @@
+package Jandy.Krystian.view;
+
+public interface View {
+    void display();
+}
